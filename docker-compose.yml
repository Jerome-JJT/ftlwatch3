version: "3.7"


services:

  flyway:
    image: flyway/flyway

    stdin_open: true # docker run -i
    tty: true        # docker run -t

    volumes:
      - ./sql:/flyway/sql

    networks:
      - back

    environment:
      DATABASE_HOST: 'db'
      DATABASE_PORT: '5432'

      POSTGRES_DB: ${DATABASE_DB}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}

    entrypoint: "bash"
    # entrypoint: "bash /flyway/sql/_myflyway.sh migrate"

  rabbit:
    build: ./_build/rabbit
    hostname: rabbit

    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

    volumes:
      - /etc/localtime:/etc/localtime:ro
      - rabbit_data:/var/lib/rabbitmq

    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASS}

    networks:
      - back


  db:
    image: postgres:14.2

    volumes:
      - /etc/localtime:/etc/localtime:ro
      - main_db:/var/lib/postgresql/data/

    networks:
      - back

    environment:
      POSTGRES_DB: ${DATABASE_DB}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}

  adminer:
    image: adminer

    # depends_on:
    #   - postgres

    # volumes:
    #   - ./adminer:/var/www/html

    networks:
      - back

  back:
    build: ./_build/php
    # image: httpd:2.4.57-alpine
    depends_on:
      - db

    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./secure_static:/secure_static
      - ./back:/var/www/html

    networks:
      - back
      - front
      - logging_logstash

    # ports:
    #   - "8888:80"

    environment:
      DATABASE_CONNECT: 'pgsql'
      DATABASE_HOST: 'db'
      DATABASE_PORT: '5432'

      DATABASE_DB: ${DATABASE_DB}
      DATABASE_USER: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}

      CALLBACK_URL: ${CALLBACK_URL}

      RABBIT_USER: ${RABBIT_USER}
      RABBIT_PASS: ${RABBIT_PASS}

      INTRA_USER: ${INTRA_USER}
      INTRA_PASS: ${INTRA_PASS}

      API_UID: ${API_FRONT_UID}
      API_SECRET: ${API_FRONT_SECRET}
  
    working_dir: /var/www/html


  front:
    build: ./_build/react

    # ports:
    #  - "8080:5173"
    #  - "8443:443"

    volumes:
      - ./site:/app

    networks:
      - front

    # environment:
      # API_UID: ${API_FRONT_UID}

    working_dir: /app

  api:
    build: 
      context: .
      dockerfile: ./_build/api/Dockerfile
    depends_on:
      rabbit:
        condition: service_healthy
    #restart: on-failure
    
    stdin_open: true # docker run -i
    tty: true        # docker run -t

    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./secure_static:/secure_static
      - ./subjects_static:/subjects_static
      - ./api:/app
      - jar:/jar

    networks:
      - back
      - logging_logstash

    env_file:
     - .env

    environment:
      DATABASE_CONNECT: 'pgsql'
      DATABASE_HOST: 'db'
      DATABASE_PORT: '5432'

      DATABASE_DB: ${DATABASE_DB}
      DATABASE_USER: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}

      RABBIT_USER: ${RABBIT_USER}
      RABBIT_PASS: ${RABBIT_PASS}

      DISCORD_BOT_PROD: ${DISCORD_BOT_PROD}
      DISCORD_BOT_DEV: ${DISCORD_BOT_DEV}
      BOT_ADMIN_WL: ${BOT_ADMIN_WL}
      
      API_UID: ${API_BACK_UID}
      API_SECRET: ${API_BACK_SECRET}

      FASTAPI_UID: ${FASTAPI_BACK_UID}
      FASTAPI_SECRET: ${FASTAPI_BACK_SECRET}

    working_dir: /app


  nginx:
    build: 
      context: .
      dockerfile: ./_build/nginx/Dockerfile

    depends_on:
      - front
      - back

    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./static:/var/www/static

    networks:
      - front
      - back


networks:
  front:
  back:
  logging_logstash:
    name: logging_logstash
    external: true

volumes:
  main_db:
  rabbit_data:
  jar:


